/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *   This file is part of
 *       _______   ______________  ______     _____
 *      / ____/ | / /  _/ ____/  |/  /   |   |__  /
 *     / __/ /  |/ // // / __/ /|_/ / /| |    /_ <
 *    / /___/ /|  // // /_/ / /  / / ___ |  ___/ /
 *   /_____/_/ |_/___/\____/_/  /_/_/  |_| /____/.
 * 
 *   Copyright © 2003-2010 Brain Control, all rights reserved.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "globals.ps"
#include "utils.ps"

sampler s_diffuseMap:   register(s0);
sampler s_normalMap:    register(s1);
sampler s_specMap:      register(s2);

struct v2f
{
	float2 texCoord:    TEXCOORD0;  // texture coordinate
	float3 vpos:        TEXCOORD1;  // position (view-space)
	float3 normal:      TEXCOORD2;  // normal (view-space)
    float3 color:       COLOR0;     // color
};

float4 main(const v2f input) : COLOR
{
    // map normal from tangent-space to view-space
	const float3x3 tf = calcTangentFrame(input.normal, input.vpos, input.texCoord);
    float3 normal = tex2D(s_normalMap, input.texCoord).xyz;
    normal = normalize(mul(unpackNormalT(normal), tf));

    // read other samplers and output color
	const float4 diffCol = tex2D(s_diffuseMap, input.texCoord)*float4(c_matDiffuseCol*input.color, 1.0f);
	const float4 specCol = tex2D(s_specMap,input.texCoord)*float4(c_matSpecCol, 1.0f);

    // evaluate lighting model
    const float3 c = phong(normal, c_lightViewPos, input.vpos, c_lightInvRange, c_lightInvRange,
                           c_lightDiffuseCol, diffCol.xyz, specCol.xyz, c_matShininess);

    return float4(c_lightTotalAmbientCol.xyz+c, diffCol.a);
}